<div class="overlay"></div>

<div id="app">
    <div id="PlayerID" class="hidden">@ViewBag.PlayerID</div>
    <div id="CoreCarousel" class="carousel carousel-fade">
        <div class="carousel-inner">
            <div id="StartScreen" class="active" :class="{'carousel-item': true, inactivate: !startActive}">
                <div class="container-fluid" style="height:100vh">

                    <svg style="top: 140px; left: 150px;" x="0px" y="0px" width="160px" height="165px" viewBox="0 0 150 160">
                        <polygon points="65.7,0 0,64.4 34.9,69.8 30.9,140.8 67.1,138.2 67.1,96.6 87.2,95.2 91.2,140.8 127.4,132.8
	                        120.7,75.1 148.9,69.8 116.7,40.2 122.1,4 99.3,1.3 99.3,22.8 " />
                    </svg>

                    <svg class="backwards" style="top: 540px; left: 200px;" x="0px" y="0px" width="400px" height="400px" viewBox="0 0 400 400">
                        <polygon points="288.58192987669304,207.40251485476347 207.40251485476347,288.58192987669304 92.59748514523653,288.58192987669304 11.41807012330699,207.40251485476347 11.418070123306961,92.59748514523655 92.59748514523645,11.418070123307018 207.4025148547635,11.418070123307018 288.581929876693,92.59748514523645" />
                    </svg>

                    <svg class="backwards" style="top: 120px; right: 200px;" x="0px" y="0px" width="300px" height="300px" viewBox="0 0 400 400">
                        <polygon points="225,279.9038105676658 0,150.00000000000003 224.9999999999999,20.096189432334143" />
                    </svg>

                    <svg style="bottom: -10px; right: 30px;" x="0px" y="0px" width="350px" height="350px" viewBox="0 0 450 450">
                        <polygon points="309.53760005996924,171.76886435917675 305.8554880596515,195.0168045783858 298.58192987669304,217.40251485476347 287.89602465311384,238.37478470739234 274.0608948400046,257.41720724952756 257.41720724952756,274.0608948400046 238.37478470739234,287.89602465311384 217.40251485476347,298.58192987669304 195.01680457838583,305.8554880596515 171.76886435917675,309.53760005996924 148.23113564082325,309.53760005996924 124.98319542161417,305.8554880596515 102.59748514523653,298.58192987669304 81.62521529260768,287.89602465311384 62.582792750472464,274.06089484000466 45.93910515999538,257.41720724952756 32.10397534688617,238.37478470739234 21.41807012330699,217.40251485476347 14.144511940348508,195.01680457838583 10.462399940030792,171.76886435917675 10.462399940030792,148.23113564082328 14.144511940348508,124.9831954216142 21.418070123307018,102.59748514523649 32.103975346886116,81.62521529260775 45.93910515999535,62.582792750472464 62.58279275047238,45.93910515999541 81.62521529260772,32.103975346886145 102.59748514523645,21.418070123307018 124.98319542161423,14.144511940348508 148.23113564082317,10.462399940030792 171.76886435917677,10.462399940030792 195.01680457838572,14.14451194034848 217.4025148547635,21.418070123307018 238.37478470739225,32.103975346886116 257.41720724952756,45.93910515999538 274.0608948400046,62.58279275047238 287.89602465311384,81.62521529260769 298.581929876693,102.59748514523645 305.8554880596515,124.98319542161423 309.53760005996924,148.23113564082317" />
                    </svg>

                    <div class="row align-items-center" style="height:100vh">
                        <div class="col text-center">
                            <div class="row">
                                <div class="col text-center">
                                    <img src="~/Images/Logo3.PNG" />
                                    <h3 class="text-white">Compete with your friends and race the clock for the best doodle!</h3>
                                    <br /><br />
                                </div>
                            </div>
                            <div class="row justify-content-center">
                                <div class="col-lg-3">
                                    <input class="form-control form-control-lg" v-model="playerName" type="text" maxlength="10" placeholder="Name">
                                    <br />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <button type="button" v-on:click="start" class="btn btn-lg btn-secondary start-btn btn-dark">START GAME</button>
                                    <br />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="LobbyScreen"  class="active" :class="{'carousel-item': true, inactivate: !lobbyActive}">
                <div class="container-fluid" style="height:100vh">
                    <div class="row align-items-center" style="height:20%">
                        <div class="col text-center">
                            <h1 class="h1-override">Logo</h1>
                        </div>
                    </div>
                    <div class="row align-items-center" style="height:20%">
                        <div class="col text-center">
                            <div v-if="lobbyPlayers.length > 1">
                                <div class="progress">
                                    <div class="progress-bar progress-bar-animated" role="progressbar" :class="lobbyCountDownStyle" :style="{width: (lobbyCountDown/30) * 100 + '%'}"></div>
                                </div>
                            </div>
                            <h2  class="h2-override" v-if="lobbyPlayers.length == 1">Waiting for players..</h2>
                        </div>

                    </div>
                    <div class="row"style="height:60%">
                        <div class="col-lg-5 text-center flex-grow-1">
                            <div class="row align-items-center" style="height:15%">
                                <div class="col text-center">
                                    <h2>Players</h2>
                                </div>
                            </div>
                            <div class="row align-items-start"style="height:70%">
                                <div class="col text-center">
                                    <ul class="list-group align-items-center text-center">
                                        <li class="li-element-player list-group-item" id="Players" v-for="player in lobbyPlayers">
                                            <h3 class="h3-override">{{player}}</h3>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="row align-items-end" style="height:15%">
                                <div class="col text-center">
                                    <ul class="list-group align-items-center text-center">
                                        <li type="button" v-on:click="inviteFriend" class=" btn btn-primary  btn-lg btn-block invite-btn">
                                            <h3 class="h3-override">Invite Friends!</h3>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-7 text-center">
                            <div class="row align-items-center" style="height:15%">
                                <div class="col text-center">
                                    <h2>Click to Vote!</h2>
                                </div>
                            </div>
                            <div class="row align-items-start" style="height:85%">
                                <div class="col text-center border-left">
                                    <ul class="list-group align-items-center">
                                        <li id="Terms" v-for="term in lobbyTermsList" :key="term.term" class="li-element-term list-group-item d-flex justify-content-between align-items-center btn btn-outline-secondary" type="button" v-on:click="voteTerm(term.term)" :class="{disabled: showVoteButtons }">
                                            <h3 class="h3-override-term">{{term.term}}</h3>
                                            <span class=" badge-primary badge-pill">{{term.votes}}</span>
                                        </li>

                                    </ul>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <div id="GameScreen" class="active" :class="{'carousel-item': true, inactivate: !gameActive}">
                <div class="loading row align-items-center justify-content-center" :class="{hidden: !gameLoading}"><img class="animated infinite jackInTheBox slow position-relative" src="~/Images/Favicon.PNG"/></div>
                <div class="container-fluid" style="height:100vh">
                    <div class="row align-items-center" style="height:100vh">
                        <div class="col text-center">
                            <div class="row fixed-top">
                                <div class="col text-center">
                                    <h2>Time Remaining: <strong><span class="h1" :class="gameCountDownStyle">{{gameCountDown}}</span></strong></h2>
                                </div>
                                <div class="col text-center">
                                    <h1>Term: <strong class="h1">{{term}}</strong></h1>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col text-center" style="top: -30px;padding-right: 0;padding-left: 0;">
                                    <div class="canvas-wrapper">
                                        <canvas id="canvas"></canvas>
                                        <div class="cursor" id="cursor"></div>
                                        <div class="controls shadow">
                                            <div class="btn-row">
                                                <button type="button"
                                                        v-on:click="removeAllHistory"
                                                        v-bind:class="{ disabled: !history.length }" title="Clear all">
                                                    <i class="fas fa-trash fa-lg"></i>
                                                </button>
                                            </div>

                                            <div class="btn-row">
                                                <button title="Pick a brush size"
                                                        v-on:click="popups.showSize = !popups.showSize"
                                                        v-bind:class="{ active: popups.showSize }">
                                                    <i class="fas fa-circle fa-lg"></i>
                                                    <span class="size-icon">
                                                        {{ size }}
                                                    </span>
                                                </button>

                                                <div class="popup shadow-lg" v-if="popups.showSize">
                                                    <div class="popup-title">
                                                        Brush size
                                                    </div>
                                                    <label v-for="sizeItem in sizes" class="size-item">
                                                        <input type="radio" name="size" v-model="size" v-bind:value="sizeItem">
                                                        <span class="size"
                                                              v-bind:style="{width: sizeItem + 'px', height: sizeItem + 'px'}"></span>
                                                    </label>
                                                </div>
                                            </div>

                                            <div class="btn-row">
                                                <button title="Pick a color"
                                                        v-on:click="popups.showColor = !popups.showColor"
                                                        v-bind:class="{ active: popups.showColor }">
                                                    <i class="fas fa-palette fa-lg"></i>
                                                    <span class="color-icon"
                                                          v-bind:style="{backgroundColor: color}">
                                                    </span>
                                                </button>

                                                <div class="popup shadow-lg" v-if="popups.showColor">
                                                    <div class="popup-title">
                                                        Brush color
                                                    </div>
                                                    <label v-for="colorItem in colors" class="color-item">
                                                        <input type="radio"
                                                               name="color"
                                                               v-model="color"
                                                               v-bind:value="colorItem">
                                                        <span v-bind:class="'color color-' + colorItem"
                                                              v-bind:style="{backgroundColor: colorItem}"></span>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="JudgementScreen" class="active" :class="{'carousel-item': true, inactivate: !judgeActive}">
                <div class="container-fluid" style="height:100vh">
                    <div class="row align-items-center" style="height:100vh">
                        <div class="col text-center">
                            <div class="row">
                                <div class="col text-center">
                                    <h1>How Will We Decide The Winner ?</h1>
                                    <br /><br />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-2 col-lg-offset-4">
                                    <button type="button" v-on:click="aiJudgement" :class="{disabled: judgementVotes==0}" class="btn btn-lg bigger-btn btn-primary shadow"><h3>AI</h3></button>
                                    <br />
                                </div>
                                <div class="col-lg-2">
                                    <button type="button" v-on:click="peerJudgement" :class="{disabled: judgementVotes==0}" class="btn btn-lg bigger-btn btn-primary shadow"><h3>Democratically</h3></button>
                                    <br />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col text-center">
                                    <br /><br />
                                    <h3>Time Remaining: <strong class="h2" :class="judgementCountDownStyle">{{judgementCountDown}}</strong></h3>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="WinningScreen" class="active" :class="{'carousel-item': true, inactivate: !winActive}">
                <div class="container-fluid" style="height:100vh">
                    <div class="row align-items-center" style="height:100vh">
                        <div class="col text-center">
                            <div class="row justify-content-center mb-5 text-white">
                                <h1 v-if="!winnerVoting && !winnerVoted && !isTie">The AI Has Chosen The WINNER!</h1>
                                <h1 v-if="winnerVoting">Click On Your Favorite Two Drawings:</h1>
                                <h1 v-if="winnerVoted && !aiBrokeTie && !isTie">A WINNER Has Been Chosen!</h1>
                                <h1 v-if="aiBrokeTie && !isTie">The AI Has Broken A Tie!</h1>
                                <h1 v-if="isTie">It's A Tie!</h1>
                            </div>
                            <div class="row justify-content-center">
                                <div class="col text-center">

                                    <div id="FinishedPlayers" class="card-deck justify-content-center">
                                        <div class="card shadow" :class="{winner: player.Name == winner.Name, animated: player.Name == winner.Name, slow: player.Name == winner.Name, tada: player.Name == winner.Name, 'disabled': player.Name == playerName, 'bg-success': player.Votes == 2 && !winnerVoted, 'bg-warning': player.Votes == 1 && !winnerVoted}" v-for="player in finishedPlayers" v-on:click="votePlayer(player)" style="max-width: 40rem;">
                                            <img :src="player.ImagePath" class="card-img-top">
                                            <div class="card-body">
                                                <h2 class="card-title">{{player.Name}}</h2>
                                                <p class="card-text" v-if="winnerVoted">Votes: {{player.Votes}}</p>
                                                <div class="row justify-content-center align-items-center card-text" v-if="(!winnerVoting && !winnerVoted ) || aiBrokeTie ">
                                                    <div class="col-lg-3">
                                                        Match:
                                                    </div>
                                                    <div class="col-lg-9">
                                                        <div class="progress mb-0">
                                                            <div class="progress-bar" role="progressbar" :style="{width: player.PercentageMatch + '%'}">
                                                                {{player.PercentageMatch}}%
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row justify-content-center mb-5 mt-4 text-white" v-if="!winnerVoting && !isTie">
                                <h2>{{winner.Name}} has the best doodle of a {{term}}.</h2>
                            </div>
                            <div class="row">
                                <div class="col text-center mt-4" v-if="winnerVoting">
                                    <h3>Time Remaining: <strong class="h2" :class="votingCountDownStyle">{{votingCountDown}}</strong></h3>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Add script to update the page and send messages.-->
<script type="text/javascript">

    var VUE;
    var DRAW;

    $(function () {
        VUE = new Vue({
            el: '#app',
            data: {
                gameConnection: $.connection.gameHub,
                coreCarousel: $('#CoreCarousel').carousel({
                    interval: false,
                }),
                playerID: $("#PlayerID").text(),
                playerName: "",
                term: "",
                startActive: true,
                lobbyActive: false,
                gameActive: false,
                winActive: false,
                judgeActive: false,
                lobbyPlayers: [],
                lobbyTerms: [],
                termVotes: 2,
                judgementVotes: 1,
                playerVotes: 2,
                lobbyCountDown: 30,
                gameCountDown: 30,
                judgementCountDown: 10,
                votingCountDown: 15,
                finishedPlayers: [],
                winnerVoting: false,
                winnerVoted: false,
                aiBrokeTie: false,
                gameLoading: false,
                stopLobbyTimer: false,
                winner: { Name: "" },

                history: [],
                color: '#13c5f7',
                popups: {
                    showColor: false,
                    showSize: false,
                },
                size: 12,
                colors: [
                    '#d4f713',
                    '#13f7ab',
                    '#13f3f7',
                    '#13c5f7',
                    '#138cf7',
                    '#1353f7',
                    '#2d13f7',
                    '#7513f7',
                    '#a713f7',
                    '#d413f7',
                    '#f713e0',
                    '#f71397',
                    '#f7135b',
                    '#f71313',
                    '#f76213',
                    '#f79413',
                    '#f7e013',
                    '#000000'],
                sizes: [6, 12, 24, 48],
                weights: [2, 4, 6]

            },

            watch: {
                size: function () {
                    this.popups.showSize = !this.popups.showSize;
                },
                color: function () {
                    this.popups.showColor = !this.popups.showColor;
                },
            },

            computed: {
                lobbyTermsList: function () {
                    var keys = Object.keys(this.lobbyTerms);
                    var terms = [];

                    keys.forEach(function (term) {
                        terms.push(
                            {
                                term: term,
                                votes: VUE.lobbyTerms[term]
                            }
                        )
                    });

                    //return _.orderBy(terms, 'votes', 'desc');
                    return terms;
                },
                showVoteButtons: function () {
                    return this.termVotes == 0;
                },
                votingCountDownStyle: function () {
                    return {
                        'text-danger': this.votingCountDown < 4,
                        'text-warning': this.votingCountDown < 5
                    }
                },
                gameCountDownStyle: function () {
                    return {
                        'text-danger': this.gameCountDown < 4,
                        'text-warning': this.gameCountDown < 10
                    }
                },
                judgementCountDownStyle: function () {
                    return {
                        'text-danger': this.judgementCountDown < 4,
                        'text-warning': this.judgementCountDown < 5
                    }
                },
                lobbyCountDownStyle: function () {
                    return {
                        'bg-danger': this.lobbyCountDown < 5,
                        'bg-warning': this.lobbyCountDown < 15
                    }
                }
            },

            methods: {
                start: function () {
                    if (this.playerName != "") {

                        this.gameConnection.server.validateName(this.playerName);
                    }
                    else {
                        $.alert({
                            title: 'No Name Entered',
                            type: 'red',
                            icon: 'fa fa-warning',
                            content: 'Please enter a name if you are starting or joining a game',
                        });
                    }
                },
                voteTerm: function (term) {
                    if (this.termVotes > 0) {
                        this.termVotes--;
                        this.gameConnection.server.voteTerm(this.playerID, term);
                    }
                },
                startLobbyTimer: function () {
                    if (this.lobbyCountDown > 0) {
                        this.lobbyCountDown--;

                        if (this.stopTimer) {
                            this.stopTimer = false;
                            return;
                        }

                        setTimeout(this.startLobbyTimer, 1000);
                    }
                },
                startGameTimer: function () {
                    if (this.gameCountDown > 0) {
                        this.gameCountDown--;

                        if (this.stopTimer) {
                            this.stopTimer = false;
                            return;
                        }

                        setTimeout(this.startGameTimer, 1000);
                    }
                },
                startJudgementTimer: function () {
                    if (this.judgementCountDown > 0) {
                        this.judgementCountDown--;

                        if (this.stopTimer) {
                            this.stopTimer = false;
                            return;
                        }

                        setTimeout(this.startJudgementTimer, 1000);
                    }
                },
                startVotingTimer: function () {
                    if (this.votingCountDown > 0) {
                        this.votingCountDown--;

                        if (this.stopTimer) {
                            this.stopTimer = false;
                            return;
                        }

                        setTimeout(this.startVotingTimer, 1000);
                    }
                },
                removeAllHistory: () => {
                    VUE.history = [];
                    DRAW.redraw();
                },
                aiJudgement: function () {
                    if (this.judgementVotes > 0) {
                        this.judgementVotes--;
                        this.gameConnection.server.voteAIJudgement(this.playerID);
                    }
                },
                peerJudgement: function () {
                    if (this.judgementVotes > 0) {
                        this.judgementVotes--;
                        this.gameConnection.server.votePeerJudgement(this.playerID);
                    }
                },
                votePlayer: function (player) {
                    if (this.playerVotes > 0 && this.winnerVoting) {
                        player.Votes = this.playerVotes;
                        this.playerVotes--;
                        this.gameConnection.server.votePlayer(this.playerID, player.Name);
                    }
                },
                inviteFriend: function () {
                    $.confirm({
                        title: 'Prompt!',
                        content: '' +
                            '<form action="" class="formName">' +
                            '<div class="form-group">' +
                            '<label>Enter friends phone number here!</label>' +
                            '<input type="text" placeholder="5555555555" class="number form-control" required />' +
                            '</div>' +
                            '</form>',
                        buttons: {
                            formSubmit: {
                                text: 'Submit',
                                btnClass: 'btn-blue',
                                action: function () {
                                    var number = this.$content.find('.number').val();
                                    if (!number) {
                                        $.alert('provide a valid number');
                                        return false;
                                    }
                                    VUE.gameConnection.server.sendFriendInvite(number, VUE.playerName);
                                    $.alert('Successfully invited friend at ' + number + '!');
                                }
                            },
                            cancel: function () {
                                //close
                            },
                        },
                        onContentReady: function () {
                            // bind to events
                            var jc = this;
                            this.$content.find('form').on('submit', function (e) {
                                // if the user submits the form by pressing enter in the field.
                                e.preventDefault();
                                jc.$$formSubmit.trigger('click'); // reference the button and click it
                            });
                        }
                    });
                },
                newGame: function () {
                    setTimeout(function () {
                        $.confirm({
                            title: 'Play Again',
                            icon: 'fa fa-question',
                            type: 'blue',
                            content: 'How about another go?',
                            buttons: {
                                again: {
                                    text: 'Play Again',
                                    btnClass: 'btn-blue',
                                    keys: ['enter', 'shift'],
                                    action: function () {
                                        VUE.resetGame();

                                        VUE.gameConnection.server.addPlayerToLobby(VUE.playerID, VUE.playerName);
                                        VUE.startActive = false;
                                        VUE.lobbyActive = true;
                                    }
                                },
                                quit: {
                                    text: 'Quit',
                                    btnClass: 'btn-red',
                                    action: function () {
                                        location.reload();
                                    }
                                },
                                cancel: {
                                    text: 'Cancel',
                                    btnClass: 'btn-secondary',
                                    action: function () {

                                    }
                                }
                            }
                        });
                    }, 10000);
                },
                resetGame: function () {
                    VUE.stopTimer = true;
                    VUE.term = "";
                    VUE.startActive = true;
                    VUE.lobbyActive = false;
                    VUE.gameActive = false;
                    VUE.winActive = false;
                    VUE.judgeActive = false;
                    VUE.lobbyPlayers = [];
                    VUE.lobbyTerms = [];
                    VUE.termVotes = 2;
                    VUE.judgementVotes = 1;
                    VUE.playerVotes = 2;
                    VUE.lobbyCountDown = 30;
                    VUE.gameCountDown = 30;
                    VUE.judgementCountDown = 10;
                    VUE.votingCountDown = 15;
                    VUE.finishedPlayers = [];
                    VUE.winnerVoting = false;
                    VUE.winnerVoted = false;
                    VUE.aiBrokeTie = false;
                    VUE.isTie = false;
                    VUE.winner = { Name: "" };
                    VUE.history = [];
                    VUE.color = '#13c5f7';
                    VUE.popups = {
                        showColor: false,
                        showSize: false
                    };
                    VUE.size = 12;

                    VUE.removeAllHistory();
                }
            },

            mounted: function () {

                $(".overlay").fadeOut();

                this.gameConnection.client.playerAddedToLobby = function (names) {
                    VUE.lobbyPlayers = names;

                    if (names.length == 2) {
                        VUE.startLobbyTimer();
                    }
                    else if (names.length == 3) {
                        VUE.lobbyCountDown = 30;
                    }
                    else if (names.length == 4) {
                        VUE.lobbyCountDown = 10;
                    }
                }

                this.gameConnection.client.playerRemovedFromLobby = function (name) {
                    VUE.lobbyPlayers.splice(VUE.lobbyPlayers.indexOf(name), 1);

                    if (names.length < 2) {
                        VUE.stopTimer = true;
                        VUE.lobbyCountDown = 30;
                    }
                }

                this.gameConnection.client.nameIsValid = function () {
                    VUE.gameConnection.server.addPlayerToLobby(VUE.playerID, VUE.playerName);
                    VUE.startActive = false;
                    VUE.lobbyActive = true;
                }

                this.gameConnection.client.nameIsNotValid = function () {
                    $.alert({
                        title: 'Name Taken',
                        type: 'red',
                        icon: 'fa fa-warning',
                        content: 'This user name is already in use. Please choose another.',
                    });
                }

                this.gameConnection.client.terminateGame = function () {
                    $.alert({
                        title: 'Game Forfitted',
                        type: 'orange',
                        icon: 'fa fa-exclamation',
                        content: 'Your opponent has left the game. You will be redirected to the lobby.',
                        buttons: {
                            ok: function () {
                                VUE.resetGame();

                                VUE.gameConnection.server.addPlayerToLobby(VUE.playerID, VUE.playerName);
                                VUE.startActive = false;
                                VUE.lobbyActive = true;
                            }
                        }
                    });
                }

                this.gameConnection.client.startGame = function (term) {

                    VUE.term = term;

                    VUE.lobbyActive = false;
                    VUE.gameActive = true;

                    VUE.startGameTimer();
                }

                this.gameConnection.client.endGame = function () {

                    VUE.gameLoading = true;

                    $.ajax({
                        type: "POST",
                        url: "Home/SetImage",
                        data: JSON.stringify({
                            Image: DRAW.c.toDataURL('image/png').replace(/^data:image\/(png|jpeg);base64,/, ''),
                            PlayerID: VUE.playerID
                        }),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    });
                }

                this.gameConnection.client.chooseJudgement = function () {

                    VUE.gameLoading = false;

                    VUE.gameActive = false;
                    VUE.judgeActive = true;
                    VUE.startJudgementTimer();
                }

                this.gameConnection.client.voteOnWinner = function (players) {
                    VUE.finishedPlayers = players;
                    VUE.judgeActive = false;
                    VUE.winActive = true;
                    VUE.winnerVoting = true;
                    VUE.startVotingTimer();
                }

                this.gameConnection.client.displayWinner = function (winner, players) {
                    VUE.winner = winner;
                    VUE.finishedPlayers = players;
                    VUE.winnerVoting = false;
                    VUE.winnerVoted = true;

                    VUE.newGame();
                }

                this.gameConnection.client.displayAIWinner = function (winner, players) {

                    VUE.gameLoading = false;

                    VUE.finishedPlayers = players;

                    if (winner != null) {
                        VUE.winner = winner;
                    }
                    else
                    {
                        VUE.isTie = true;
                    }

                    VUE.gameActive = false;
                    VUE.judgeActive = false;
                    VUE.winActive = true;

                    if (VUE.winnerVoting) {
                        VUE.aiBrokeTie = true;
                        VUE.winnerVoting = false;
                        VUE.winnerVoted = true;
                    }

                    VUE.newGame();
                }

                this.gameConnection.client.setTerms = function (terms) {
                    VUE.lobbyTerms = terms;
                }

                this.gameConnection.client.votedTerm = function (term, voteCount) {
                    VUE.lobbyTerms[term] = voteCount;
                }

                $.connection.hub.start();
            }
        });

        class Draw {
            constructor() {
                this.c = document.getElementById('canvas');
                this.ctx = this.c.getContext('2d');

                this.mouseDown = false;
                this.mouseX = 0;
                this.mouseY = 0;

                this.tempHistory = [];

                this.setSize();

                this.listen();

                this.redraw();
            }

            listen() {
                this.c.addEventListener('mousedown', (e) => {
                    this.mouseDown = true;
                    this.mouseX = e.offsetX;
                    this.mouseY = e.offsetY;
                    this.setDummyPoint();
                });

                this.c.addEventListener('mouseup', () => {
                    if (this.mouseDown) {
                        this.setDummyPoint();
                    }
                    this.mouseDown = false;
                });

                this.c.addEventListener('mouseleave', () => {
                    if (this.mouseDown) {
                        this.setDummyPoint();
                    }
                    this.mouseDown = false;
                });

                this.c.addEventListener('mousemove', (e) => {
                    this.moveMouse(e);

                    if (this.mouseDown) {
                        this.mouseX = this.mouseX;
                        this.mouseY = this.mouseY;

                        this.mouseX = e.offsetX;
                        this.mouseY = e.offsetY;

                        var item = {
                            isDummy: false,
                            x: this.mouseX,
                            y: this.mouseY,
                            c: VUE.color,
                            r: VUE.size
                        };

                        VUE.history.push(item);
                        this.draw(item, VUE.history.length);
                    }
                });

                window.addEventListener('resize', () => {
                    this.setSize();
                    this.redraw();
                });
            }

            setSize() {
                this.c.width = window.innerWidth;
                this.c.height = window.innerHeight - 60;
            }

            moveMouse(e) {
                let x = e.offsetX;
                let y = e.offsetY;

                var cursor = document.getElementById('cursor');

                cursor.style.transform = `translate(${x - 10}px, ${y - 10}px)`;
            }

            getDummyItem() {
                var lastPoint = VUE.history[VUE.history.length - 1];

                var x = 0;
                var y = 0;

                if (lastPoint != null) {
                    x = lastPoint.x;
                    y = lastPoint.y;
                }

                return {
                    isDummy: true,
                    x: x,
                    y: y,
                    c: null,
                    r: null
                };
            }

            setDummyPoint() {
                var item = this.getDummyItem();
                VUE.history.push(item);
                this.draw(item, VUE.history.length);
            }

            redraw() {
                this.ctx.clearRect(0, 0, this.c.width, this.c.height);
                this.drawBgDots();

                if (!VUE.history.length) {
                    return true;
                }

                VUE.history.forEach((item, i) => {
                    this.draw(item, i);
                });
            }

            drawBgDots() {
                var gridSize = 50;
                this.ctx.fillStyle = 'rgba(0, 0, 0, .2)';

                for (var i = 0; i * gridSize < this.c.width; i++) {
                    for (var j = 0; j * gridSize < this.c.height; j++) {
                        if (i > 0 && j > 0) {
                            this.ctx.beginPath();
                            this.ctx.rect(i * gridSize, j * gridSize, 2, 2);
                            this.ctx.fill();
                            this.ctx.closePath();
                        }
                    }
                }
            }

            draw(item, i) {
                this.ctx.lineCap = 'round';
                this.ctx.lineJoin = "round";

                var prevItem = VUE.history[i - 2];

                if (i < 2) {
                    return false;
                }

                if (!item.isDummy && !VUE.history[i - 1].isDummy && !prevItem.isDummy) {
                    this.ctx.strokeStyle = item.c;
                    this.ctx.lineWidth = item.r;

                    this.ctx.beginPath();
                    this.ctx.moveTo(prevItem.x, prevItem.y);
                    this.ctx.lineTo(item.x, item.y);
                    this.ctx.stroke();
                    this.ctx.closePath();
                } else if (!item.isDummy) {
                    this.ctx.strokeStyle = item.c;
                    this.ctx.lineWidth = item.r;

                    this.ctx.beginPath();
                    this.ctx.moveTo(item.x, item.y);
                    this.ctx.lineTo(item.x, item.y);
                    this.ctx.stroke();
                    this.ctx.closePath();
                }
            }
        }

        DRAW = new Draw();

    });
</script>

<!-- /ko -->
