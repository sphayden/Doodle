<div id="app">
    <div id="PlayerID" class="hidden">@ViewBag.PlayerID</div>
    <div id="CoreCarousel" class="carousel carousel-fade">
        <div class="carousel-inner">
            <div id="StartScreen" :class="{'carousel-item': true, active: startActive}">
                <div class="container-fluid" style="height:100vh">
                    <div class="row align-items-center" style="height:100vh">
                        <div class="col text-center">
                            <div class="row">
                                <div class="col text-center">
                                    <h1>Doodle Dash</h1>
                                    <h3>Compete with your friends and race the clock for the best doodle!</h3>
                                    <br /><br />
                                </div>
                            </div>
                            <div class="row justify-content-center">
                                <div class="col-lg-3">
                                    <input class="form-control form-control-lg" v-model="playerName" type="text" placeholder="Name">
                                    <br />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <button type="button" v-on:click="start" class="btn btn-lg btn-secondary start-btn btn-dark">START GAME</button>
                                    <br />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="LobbyScreen" :class="{'carousel-item': true, active: lobbyActive}">
                <div class="container-fluid" style="height:100vh">
                    <div class="row align-items-center">
                        <div class="col text-center">
                            <h1>Doodle Dash Lobby</h1>
                        </div>
                    </div>
                    <div class="row align-items-center">
                        <div class="col text-center">
                            <h2>Waiting for players...</h2>
                        </div>

                    </div>
                    <div class="row">
                        <div class="col-lg-5 text-center">
                            <div class="row align-items-center">
                                <div class="col text-center">
                                    <h2>Players</h2>
                                </div>
                            </div>
                            <div class="row align-items-center">
                                <div class="col text-center">
                                    <ul class="list-group align-items-center text-center">
                                        <li class="li-element list-group-item" id="Players" v-for="player in lobbyPlayers">
                                            <h3 class="h3-override">{{player}}</h3>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-7 text-center">
                            <div class="row align-items-center">
                                <div class="col text-center">
                                    <h2>Click to Vote!</h2>
                                </div>
                            </div>
                            <div class="row align-items-center">
                                <div class="col text-center border-left">
                                    <ul class="list-group align-items-center">
                                        <li id="Terms" v-for="term in lobbyTermsList" :key="term.term" class="li-element list-group-item d-flex justify-content-between align-items-center btn btn-outline-secondary" type="button" v-on:click="voteTerm(term.term)" :class="{disabled: showVoteButtons }">
                                            <h3 class="h3-override">{{term.term}}</h3>
                                            <span class="badge badge-primary badge-pill">{{term.votes}}</span>
                                        </li>

                                    </ul>
                                </div>
                        </div>

                    </div>
                </div>
            </div>
            <div id="GameScreen" :class="{'carousel-item': true, active: gameActive}">
                <div class="container-fluid" style="height:100vh">
                    <div class="row align-items-center" style="height:100vh">
                        <div class="col text-center">
                            <div class="row">
                                <div class="col text-center">
                                    <h1>{{gameCountDown}}</h1>
                                    <h1>{{term}}</h1>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col text-center" style="top: -30px;padding-right: 0;padding-left: 0;">
                                    <div class="canvas-wrapper">
                                        <canvas id="canvas"></canvas>
                                        <div class="cursor" id="cursor"></div>
                                        <div class="controls">
                                            <div class="btn-row">
                                                <button type="button"
                                                        v-on:click="removeAllHistory"
                                                        v-bind:class="{ disabled: !history.length }" title="Clear all">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>

                                            <div class="btn-row">
                                                <button title="Pick a brush size"
                                                        v-on:click="popups.showSize = !popups.showSize"
                                                        v-bind:class="{ active: popups.showSize }">
                                                    <i class="fas fa-circle"></i>
                                                    <span class="size-icon">
                                                        {{ size }}
                                                    </span>
                                                </button>

                                                <div class="popup shadow-lg" v-if="popups.showSize">
                                                    <div class="popup-title">
                                                        Brush size
                                                    </div>
                                                    <label v-for="sizeItem in sizes" class="size-item">
                                                        <input type="radio" name="size" v-model="size" v-bind:value="sizeItem">
                                                        <span class="size"
                                                              v-bind:style="{width: sizeItem + 'px', height: sizeItem + 'px'}"></span>
                                                    </label>
                                                </div>
                                            </div>

                                            <div class="btn-row">
                                                <button title="Pick a color"
                                                        v-on:click="popups.showColor = !popups.showColor"
                                                        v-bind:class="{ active: popups.showColor }">
                                                    <i class="fas fa-palette"></i>
                                                    <span class="color-icon"
                                                          v-bind:style="{backgroundColor: color}">
                                                    </span>
                                                </button>

                                                <div class="popup shadow-lg" v-if="popups.showColor">
                                                    <div class="popup-title">
                                                        Brush color
                                                    </div>
                                                    <label v-for="colorItem in colors" class="color-item">
                                                        <input type="radio"
                                                               name="color"
                                                               v-model="color"
                                                               v-bind:value="colorItem">
                                                        <span v-bind:class="'color color-' + colorItem"
                                                              v-bind:style="{backgroundColor: colorItem}"></span>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="JudgementScreen" :class="{'carousel-item': true, active: judgeActive}">
                <div class="container-fluid" style="height:100vh">
                    <div class="row align-items-center" style="height:100vh">
                        <div class="col text-center">
                            <div class="row">
                                <div class="col text-center">
                                    <h1>How will we decide the winner?</h1>
                                    <br /><br />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-2 col-lg-offset-4">
                                    <button type="button" v-on:click="aiJudgement" :class="{disabled: judgementVotes==0}" class="btn btn-lg bigger-btn btn-dark"><h3>AI</h3></button>
                                    <br />
                                </div>
                                <div class="col-lg-2">
                                    <button type="button" v-on:click="peerJudgement" :class="{disabled: judgementVotes==0}" class="btn btn-lg bigger-btn btn-dark"><h3>Democratically</h3></button>
                                    <br />
                                </div>
                            </div>
                             <div class="row">
                                 <div class="col text-center">
                                     <br /><br />
                                     Time Remaining: {{judgementCountDown}}
                                 </div>
                             </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="WinningScreen" :class="{'carousel-item': true, active: winActive}">
                <div class="container-fluid" style="height:100vh">
                    <div class="row align-items-center" style="height:100vh">
                        <div class="col text-center">
                            <div class="row justify-content-center mb-5">
                                <h1 v-if="!winnerVoting && !winnerVoted">The AI Has Chosen The WINNER!</h1>
                                <h1 v-if="winnerVoting">Click On Your Favorite Two Drawings:</h1>
                                <h1 v-if="winnerVoted && !aiBrokeTie">A WINNER Has Been Chosen!</h1>
                                <h1 v-if="aiBrokeTie">The AI Has Broken A Tie!</h1>
                            </div>
                            <div class="row justify-content-center">
                                <div class="col text-center">

                                    <div id="FinishedPlayers" class="card-deck justify-content-center">
                                        <div class="card shadow" :class="{winner: player.Name == winner.Name, animated: player.Name == winner.Name, slow: player.Name == winner.Name, tada: player.Name == winner.Name, 'disabled': player.Name == playerName, 'bg-success': player.Votes == 2 && !winnerVoted, 'bg-warning': player.Votes == 1 && !winnerVoted}" v-for="player in finishedPlayers" v-on:click="votePlayer(player)" style="max-width: 40rem;">
                                            <img :src="player.ImagePath" class="card-img-top">
                                            <div class="card-body">
                                                <h2 class="card-title">{{player.Name}}</h2>
                                                <p class="card-text" v-if="winnerVoted">Votes: {{player.Votes}}</p>
                                                <div class="row justify-content-center align-items-center card-text" v-if="(!winnerVoting && !winnerVoted ) || aiBrokeTie ">
                                                    <div class="col-lg-3">
                                                        Match:
                                                    </div>
                                                    <div class="col-lg-9">
                                                        <div class="progress mb-0">
                                                            <div class="progress-bar" role="progressbar" :style="{width: player.PercentageMatch + '%'}">
                                                                {{player.PercentageMatch}}%
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col text-center mt-4" v-if="winnerVoting">
                                    <h3>Time Remaining: <strong class="h2" :class="votingCountDownStyle">{{votingCountDown}}</strong></h3>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Add script to update the page and send messages.-->
<script type="text/javascript">

    var VUE;
    var DRAW;

    $(function () {
        VUE = new Vue({
            el: '#app',
            data: {
                gameConnection: $.connection.gameHub,
                coreCarousel: $('#CoreCarousel').carousel({
                    interval: false,
                }),
                playerID: $("#PlayerID").text(),
                playerName: "",
                term: "",
                startActive: false,
                lobbyActive: false,
                gameActive: false,
                winActive: false,
                judgeActive: true,
                lobbyPlayers: [],
                lobbyTerms: [],
                termVotes: 2,
                judgementVotes: 1,
                playerVotes: 2,
                lobbyCountDown: 30,
                gameCountDown: 30,
                judgementCountDown: 10,
                votingCountDown: 15,
                finishedPlayers: [],
                winnerVoting: false,
                winnerVoted: false,
                aiBrokeTie: false,
                winner: { Name: ""},

                history: [],
                color: '#13c5f7',
                popups: {
                    showColor: false,
                    showSize: false,
                },
                size: 12,
                colors: [
                    '#d4f713',
                    '#13f7ab',
                    '#13f3f7',
                    '#13c5f7',
                    '#138cf7',
                    '#1353f7',
                    '#2d13f7',
                    '#7513f7',
                    '#a713f7',
                    '#d413f7',
                    '#f713e0',
                    '#f71397',
                    '#f7135b',
                    '#f71313',
                    '#f76213',
                    '#f79413',
                    '#f7e013'],
                sizes: [6, 12, 24, 48],
                weights: [2, 4, 6]

            },

            watch: {
                size: function () {
                    this.popups.showSize = !this.popups.showSize;
                },
                color: function () {
                    this.popups.showColor = !this.popups.showColor;
                },
            },

            computed: {
                lobbyTermsList: function ()
                {
                    var keys = Object.keys(this.lobbyTerms);
                    var terms = [];

                    keys.forEach(function (term)
                    {
                        terms.push(
                            {
                                term: term,
                                votes: VUE.lobbyTerms[term]
                            }
                        )
                    });

                    //return _.orderBy(terms, 'votes', 'desc');
                    return terms;
                },
                showVoteButtons: function ()
                {
                    return this.termVotes == 0;
                },
                votingCountDownStyle: function ()
                {
                    return {
                        'text-danger': this.votingCountDown < 4,
                        'text-warning': this.votingCountDown < 5
                    }
                }
            },

            methods: {
                start: function ()
                {
                    if (this.playerName != "") 
                    {
                        this.gameConnection.server.addPlayerToLobby(this.playerID, this.playerName);
                        this.startActive = false;
                        this.lobbyActive = true;
                    }
                    else
                    {
                        $.alert({
                            title: 'No Name',
                            type: 'red',
                            icon: 'fa fa-warning',
                            content: 'Please enter a name if you are starting or joining a game',
                        });
                    }
                },
                voteTerm: function (term)
                {
                    if (this.termVotes > 0)
                    {
                        this.termVotes--;
                        this.gameConnection.server.voteTerm(this.playerID, term);
                    }
                },
                startLobbyTimer: function ()
                {
                    if (this.lobbyCountDown > 0) {
                        this.lobbyCountDown--;
                        setTimeout(this.startLobbyTimer, 1000);
                    }
                },
                startGameTimer: function () {
                    if (this.gameCountDown > 0) {
                        this.gameCountDown--;
                        setTimeout(this.startGameTimer, 1000);
                    }
                },
                startJudgementTimer: function () {
                    if (this.judgementCountDown > 0) {
                        this.judgementCountDown--;
                        setTimeout(this.startJudgementTimer, 1000);
                    }
                },
                startVotingTimer: function () {
                    if (this.votingCountDown > 0) {
                        this.votingCountDown--;
                        setTimeout(this.startVotingTimer, 1000);
                    }
                },
                removeAllHistory: () => {
                    VUE.history = [];
                    draw.redraw();
                },
                aiJudgement: function () {
                    if (this.judgementVotes > 0) {
                        this.judgementVotes--;
                        this.gameConnection.server.voteAIJudgement(this.playerID);
                    }
                },
                peerJudgement: function () {
                    if (this.judgementVotes > 0) {
                        this.judgementVotes--;
                        this.gameConnection.server.votePeerJudgement(this.playerID);
                    }
                },
                votePlayer: function (player) {
                    if (this.playerVotes > 0 && this.winnerVoting) {
                        player.Votes = this.playerVotes;
                        this.playerVotes--;
                        this.gameConnection.server.votePlayer(this.playerID, player.Name);
                    }
                },
                newGame: function () {
                    setTimeout(function () {
                        $.confirm({
                            title: 'Play Again',
                            icon: 'fa fa-question',
                            type: 'blue',
                            content: 'How about another go?',
                            buttons: {
                                again: {
                                    text: 'Play Again',
                                    btnClass: 'btn-blue',
                                    keys: ['enter', 'shift'],
                                    action: function () {
                                        VUE.resetGame();

                                        VUE.gameConnection.server.addPlayerToLobby(VUE.playerID, VUE.playerName);
                                        VUE.startActive = false;
                                        VUE.lobbyActive = true;
                                    }
                                },
                                quit: {
                                    text: 'Quit',
                                    btnClass: 'btn-red',
                                    action: function () {
                                        location.reload();
                                    }
                                }
                            }
                        });
                    }, 5000);
                },
                resetGame: function() {
                    VUE.playerName = "";
                    VUE.term = "";
                    VUE.startActive = true;
                    VUE.lobbyActive = false;
                    VUE.gameActive = false;
                    VUE.winActive = false;
                    VUE.judgeActive = false;
                    VUE.lobbyPlayers = [];
                    VUE.lobbyTerms = [];
                    VUE.termVotes = 2;
                    VUE.judgementVotes = 1;
                    VUE.playerVotes = 2;
                    VUE.lobbyCountDown = 30;
                    VUE.gameCountDown = 30;
                    VUE.judgementCountDown = 10;
                    VUE.votingCountDown = 15;
                    VUE.finishedPlayers = [];
                    VUE.winnerVoting = false;
                    VUE.winnerVoted = false;
                    VUE.aiBrokeTie = false;
                    VUE.winner = { Name: ""};
                    VUE.history = [];
                    VUE.color = '#13c5f7';
                    VUE.popups = {
                        showColor: false,
                        showSize: false
                    };
                    VUE.size = 12;
                }
            },

            mounted: function () {

                this.gameConnection.client.playerAddedToLobby = function (names) {
                    VUE.lobbyPlayers = names;  

                    if (names.length == 2)
                    {
                        VUE.startLobbyTimer();
                    }
                    else if (names.length == 3)
                    {
                        VUE.lobbyCountDown = 30;
                    }
                    else if (names.length == 4)
                    {
                        VUE.lobbyCountDown = 10;
                    }
                }

                this.gameConnection.client.startGame = function (term) {

                    VUE.term = term;

                    VUE.lobbyActive = false;
                    VUE.gameActive = true;

                    VUE.startGameTimer();
                }

                this.gameConnection.client.endGame = function () {

                    $.ajax({
                        type: "POST",
                        url: "Home/SetImage",
                        data: JSON.stringify({
                            Image: DRAW.c.toDataURL('image/png').replace(/^data:image\/(png|jpeg);base64,/, ''),
                            PlayerID: VUE.playerID
                        }),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    });
                }

                this.gameConnection.client.chooseJudgement = function () {
                    VUE.gameActive = false;
                    VUE.judgeActive = true;
                    VUE.startJudgementTimer();
                }

                this.gameConnection.client.voteOnWinner = function (players) {
                    VUE.finishedPlayers = players;
                    VUE.judgeActive = false;
                    VUE.winActive = true;
                    VUE.winnerVoting = true;
                    VUE.startVotingTimer();
                }

                this.gameConnection.client.displayWinner = function (winner, players) {
                    VUE.winner = winner;
                    VUE.finishedPlayers = players;
                    VUE.winnerVoting = false;
                    VUE.winnerVoted = true;

                    VUE.newGame();
                }

                this.gameConnection.client.displayAIWinner = function (winner, players) {
                    VUE.finishedPlayers = players;
                    VUE.winner = winner;
                    VUE.gameActive = false;
                    VUE.judgeActive = false;
                    VUE.winActive = true;

                    if (VUE.winnerVoting) {
                        VUE.aiBrokeTie = true;
                        VUE.winnerVoting = false;
                        VUE.winnerVoted = true;
                    }

                    VUE.newGame();
                }

                this.gameConnection.client.setTerms = function (terms) {
                    VUE.lobbyTerms = terms;
                }

                this.gameConnection.client.votedTerm = function (term, voteCount) {
                    VUE.lobbyTerms[term] = voteCount;
                }

                $.connection.hub.start();
            }
        });

        class Draw {
            constructor() {
                this.c = document.getElementById('canvas');
                this.ctx = this.c.getContext('2d');

                this.mouseDown = false;
                this.mouseX = 0;
                this.mouseY = 0;

                this.tempHistory = [];

                this.setSize();

                this.listen();

                this.redraw();
            }

            listen() {
                this.c.addEventListener('mousedown', (e) => {
                    this.mouseDown = true;
                    this.mouseX = e.offsetX;
                    this.mouseY = e.offsetY;
                    this.setDummyPoint();
                });

                this.c.addEventListener('mouseup', () => {
                    if (this.mouseDown) {
                        this.setDummyPoint();
                    }
                    this.mouseDown = false;
                });

                this.c.addEventListener('mouseleave', () => {
                    if (this.mouseDown) {
                        this.setDummyPoint();
                    }
                    this.mouseDown = false;
                });

                this.c.addEventListener('mousemove', (e) => {
                    this.moveMouse(e);

                    if (this.mouseDown) {
                        this.mouseX = this.mouseX;
                        this.mouseY = this.mouseY;
      
                        this.mouseX = e.offsetX;
                        this.mouseY = e.offsetY;

                        var item = {
                            isDummy: false,
                            x: this.mouseX,
                            y: this.mouseY,
                            c: VUE.color,
                            r: VUE.size
                        };

                        VUE.history.push(item);
                        this.draw(item, VUE.history.length);
                    }
                });

                window.addEventListener('resize', () => {
                    this.setSize();
                    this.redraw();
                });
            }

            setSize() {
                this.c.width = window.innerWidth;
                this.c.height = window.innerHeight - 60;
            }

            moveMouse(e) {
                let x = e.offsetX;
                let y = e.offsetY;

                var cursor = document.getElementById('cursor');

                cursor.style.transform = `translate(${x - 10}px, ${y - 10}px)`;
            }

            getDummyItem() {
                var lastPoint = VUE.history[VUE.history.length - 1];

                var x = 0;
                var y = 0;

                if (lastPoint != null) {
                    x = lastPoint.x;
                    y = lastPoint.y;
                }

                return {
                    isDummy: true,
                    x: x,
                    y: y,
                    c: null,
                    r: null
                };
            }

            setDummyPoint() {
                var item = this.getDummyItem();
                VUE.history.push(item);
                this.draw(item, VUE.history.length);
            }

            redraw() {
                this.ctx.clearRect(0, 0, this.c.width, this.c.height);
                this.drawBgDots();

                if (!VUE.history.length) {
                    return true;
                }

                VUE.history.forEach((item, i) => {
                    this.draw(item, i);
                });
            }

            drawBgDots() {
                var gridSize = 50;
                this.ctx.fillStyle = 'rgba(0, 0, 0, .2)';

                for (var i = 0; i * gridSize < this.c.width; i++) {
                    for (var j = 0; j * gridSize < this.c.height; j++) {
                        if (i > 0 && j > 0) {
                            this.ctx.beginPath();
                            this.ctx.rect(i * gridSize, j * gridSize, 2, 2);
                            this.ctx.fill();
                            this.ctx.closePath();
                        }
                    }
                }
            }

            draw(item, i) {
                this.ctx.lineCap = 'round';
                this.ctx.lineJoin = "round";

                var prevItem = VUE.history[i - 2];

                if (i < 2) {
                    return false;
                }

                if (!item.isDummy && !VUE.history[i - 1].isDummy && !prevItem.isDummy) {
                    this.ctx.strokeStyle = item.c;
                    this.ctx.lineWidth = item.r;

                    this.ctx.beginPath();
                    this.ctx.moveTo(prevItem.x, prevItem.y);
                    this.ctx.lineTo(item.x, item.y);
                    this.ctx.stroke();
                    this.ctx.closePath();
                } else if (!item.isDummy) {
                    this.ctx.strokeStyle = item.c;
                    this.ctx.lineWidth = item.r;

                    this.ctx.beginPath();
                    this.ctx.moveTo(item.x, item.y);
                    this.ctx.lineTo(item.x, item.y);
                    this.ctx.stroke();
                    this.ctx.closePath();
                }
            }
        }

        DRAW = new Draw();

    });
</script>

<!-- /ko -->
